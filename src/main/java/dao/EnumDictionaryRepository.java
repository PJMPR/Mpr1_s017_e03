package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.model.EnumDictionary;
import domain.model.Person;

public class EnumDictionaryRepository extends RepositoryBase {

	
	
	public EnumDictionaryRepository(Connection connection) {
		super(connection);
	}
	
	public void delete(EnumDictionary ed){
		try{
			delete.setInt(1, ed.getId());
			delete.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public EnumDictionary get(int enumDictionaryId){
		try{
			
			selectById.setInt(1, enumDictionaryId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				EnumDictionary result = new EnumDictionary();
				result.setId(rs.getInt("id"));
				result.setIntKey(rs.getInt("Int Key"));
				result.setStringKey(rs.getString("String Key"));
				result.setValue(rs.getString("Value"));
				result.setEnumName(rs.getString("Enum Name"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}



	public List<EnumDictionary> getAll(){
		try{
			List<EnumDictionary> result = new ArrayList<EnumDictionary>();
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()){
				EnumDictionary ed = new EnumDictionary();
				ed.setId(rs.getInt("id"));
				ed.setIntKey(rs.getInt("int Key"));
				ed.setStringKey(rs.getString("String Key"));
				ed.setValue(rs.getString("value"));
				ed.setEnumName(rs.getString("Enum Name"));
				result.add(ed);
			}
			return result;
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	

	public void add(EnumDictionary ed){
		try{
			
			insert.setLong(1, ed.getIntKey());
			insert.setString(2, ed.getStringKey());
			insert.setString(3, ed.getValue());
			insert.setString(4, ed.getEnumName());
			insert.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	
	}
	
	public void update(EnumDictionary ed){
		try{
			
			update.setLong(1, ed.getIntKey());
			update.setString(2,  ed.getStringKey());
			update.setString(3, ed.getValue());
			update.setString(4, ed.getEnumName());
			update.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		
	}

	@Override
	protected String tableName() {
		return "enumDictionary)";
	}

	@Override
	protected String createTableSql() {
		return "CREATE TABLE enumDictionary("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "intKey INT,"
				+ "stringKey VARCHAR(50),"
				+ "value VARCHAR(50),"
				+ "enumName VARCHAR(50),"
				+ ")";
	}

	@Override
	protected String insertSql() {
		return "INSERT INTO enumDictionary(intKey,stringKey,value,enumName) VALUES(?,?,?,?)";
	}

	@Override
	protected String deleteSql() {
		return "DELETE FROM enumDictionary WHERE id = ?";
	}

	@Override
	protected String updateSql() {
		return "UPDATE FROM enumDictionary WHERE id = ?";
	}

	@Override
	protected String selectByIdSql() {
		return "SELECT * FROM enumDictionary WHERE id=?";
	}

	@Override
	protected String selectAllSql() {
		return "SELECT * FROM enumDictionary";
	}
	
}
