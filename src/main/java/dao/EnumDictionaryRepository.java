package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.model.EnumDictionary;
import domain.model.Person;

public class EnumDictionaryRepository {

private Connection connection;
	
	private String createTableSql = "CREATE TABLE enumDictionary("
			+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
			+ "intKey INT,"
			+ "stringKey VARCHAR(50),"
			+ "value VARCHAR(50),"
			+ "enumName VARCHAR(50),"
			+ ")";
	private Statement createTable;
	
	
	private String insertSql = "INSERT INTO enumDictionary(intKey,stringKey,value,enumName) VALUES(?,?,?,?)";
	private String deleteSql = "DELETE FROM enumDictionary WHERE id = ?";
	private String updateSql = "UPDATE FROM enumDictionary WHERE id = ?";
	private String selectByIdSql = "SELECT * FROM enumDictionary WHERE id=?";
	private String selectAllSql = "SELECT * FROM enumDictionary";
	
	private PreparedStatement insert;
	private PreparedStatement delete;
	private PreparedStatement update;
	private PreparedStatement selectById;
	private PreparedStatement selectAll;
	
	public EnumDictionaryRepository() {
		this.connection = connection;
		
		try {
			createTable = connection.createStatement();
			
			boolean tableExists = false;
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("enumDictionary")){
					tableExists=true;
					break;
				}
			}
			if(!tableExists)
				createTable.executeUpdate(createTableSql);	
			
			insert = connection.prepareStatement(insertSql);
			delete = connection.prepareStatement(deleteSql);
			update = connection.prepareStatement(updateSql);
			selectById = connection.prepareStatement(selectByIdSql);
			selectAll = connection.prepareStatement(selectAllSql);
	
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void delete(EnumDictionary ed){
		try{
			delete.setInt(1, ed.getId());
			delete.executeUpdate();
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	}
	
	public EnumDictionary get(int enumDictionaryId){
		try{
			
			selectById.setInt(1, enumDictionaryId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				EnumDictionary result = new EnumDictionary();
				result.setId(rs.getInt("id"));
				result.setIntKey(rs.getInt("Int Key"));
				result.setStringKey(rs.getString("String Key"));
				result.setValue(rs.getString("Value"));
				result.setEnumName(rs.getString("Enum Name"));
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}



	public List<EnumDictionary> getAll(){
		try{
			List<EnumDictionary> result = new ArrayList<EnumDictionary>();
			ResultSet rs = selectAll.executeQuery();
			while(rs.next()){
				EnumDictionary ed = new EnumDictionary();
				ed.setId(rs.getInt("id"));
				ed.setIntKey(rs.getInt("int Key"));
				ed.setStringKey(rs.getString("String Key"));
				ed.setValue(rs.getString("value"));
				ed.setEnumName(rs.getString("Enum Name"));
				result.add(ed);
			}
			return result;
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
	}
	

	public void add(EnumDictionary ed){
		try{
			
			insert.setLong(1, ed.getIntKey());
			insert.setString(2, ed.getStringKey());
			insert.setString(3, ed.getValue());
			insert.setString(4, ed.getEnumName());
			insert.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
	
	}
	
	public void update(EnumDictionary ed){
		try{
			
			update.setLong(1, ed.getIntKey());
			update.setString(2,  ed.getStringKey());
			update.setString(3, ed.getValue());
			update.setString(4, ed.getEnumName());
			update.executeUpdate();
			
		}catch(SQLException ex){
			ex.printStackTrace();
		}
		
	}
	
}
